{"version":3,"sources":["Cards.jsx","redux/Cards/fetchCards.js","redux/Cards/cards.actions.js","redux/Cards/cards.types.js","App.js","serviceWorker.js","redux/Cards/cards.reducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["Cards","props","onScroll","console","log","window","innerHeight","scrollY","document","body","offsetHeight","setState","start","state","this","fetchCardsAPI","limit","removeEventListener","addEventListener","cards","map","val","id","className","style","width","marginLeft","title","Component","connect","dispatch","params","fetch","then","res","json","error","type","catch","App","class","Boolean","location","hostname","match","INITIAL_STATE","loading","reducer","action","concat","rootReducer","combineReducers","cardsReducer","middlewares","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gRAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmBRC,SAAW,WACPC,QAAQC,IAAIC,OAAOC,YAAcD,OAAOE,QAAUC,SAASC,KAAKC,cAC9DL,OAAOC,YAAcD,OAAOE,SAAWC,SAASC,KAAKC,eACrDP,QAAQC,IAAI,OACd,EAAKO,SAAS,CAAEC,MAAO,EAAKC,MAAMD,MAAQ,KAAM,WAE9CE,KAAKb,MAAMc,cAAc,CACvBH,MAAOE,KAAKD,MAAMD,MAClBI,MAAOF,KAAKD,MAAMG,WAGtBR,SAASS,oBAAoB,SAAU,EAAKf,YA7B9C,EAAKW,MAAQ,CACXD,MAAO,EACPI,MAAO,IAJQ,E,gEASjBX,OAAOa,iBAAiB,SAAUJ,KAAKZ,UAAU,GACjDY,KAAKb,MAAMc,cAAc,CACvBH,MAAOE,KAAKD,MAAMD,MAClBI,MAAOF,KAAKD,MAAMG,U,6CAKpBR,SAASS,oBAAoB,SAAUH,KAAKZ,Y,+BAoBpC,IACAiB,EAAUL,KAAKb,MAAfkB,MAER,OADAhB,QAAQC,IAAIU,KAAKb,OACVkB,EAAMA,MAAMC,KAAI,SAACC,GACtB,OACE,oCACE,uCAAaA,EAAIC,IACjB,yBAAKC,UAAU,OAAOC,MAAO,CAAEC,MAAO,QAASC,WAAY,QACzD,yBAAKH,UAAU,aACb,wBAAIA,UAAU,cAAcF,EAAIM,OAChC,uBAAGJ,UAAU,aAAaF,EAAIZ,gB,GAhDxBmB,aAsELC,eAbS,SAAChB,GAEvB,OADAV,QAAQC,IAAI,SAAUS,GACf,CACLM,MAAON,EAAMM,UAIU,SAACW,GAC1B,MAAO,CACLf,cAAe,SAACgB,GAAD,OAAYD,ECpEhB,SAAuBC,GAClC,OAAO,SAAAD,GACHE,MAAM,qDAAD,OAAsDD,EAAOnB,MAA7D,mBAA6EmB,EAAOf,QACxFiB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,GAAGA,EAAIE,MACH,MAAMF,EAAIE,MAGd,OADAN,ECPJ,CACNO,KCJyB,cDKzBlB,MDK8Be,IACbA,KAEVI,OAAM,SAAAF,QDyDyBrB,CAAcgB,QAIvCF,CAA6C7B,GItE7C,SAASuC,EAAItC,GAC1B,OACE,yBAAKsB,UAAU,MAAMD,GAAG,QACtB,yBAAKkB,MAAM,8BACT,0BAAMA,MAAM,wBAAZ,UAEF,kBAAC,EAAD,OCEcC,QACW,cAA7BpC,OAAOqC,SAASC,UAEe,UAA7BtC,OAAOqC,SAASC,UAEhBtC,OAAOqC,SAASC,SAASC,MACvB,2D,kCChBAC,EAAgB,CACpB1B,MAAO,GACP2B,SAAQ,GAgBKC,EAbC,WAAoC,IAAnClC,EAAkC,uDAA1BgC,EAAeG,EAAW,uCAEjD,OADA7C,QAAQC,IAAI4C,GACJA,EAAOX,MACb,IHVuB,cGWrB,OAAO,2BACFxB,GADL,IAEEM,MAAON,EAAMM,MAAM8B,OAAOD,EAAO7B,SAErC,QACE,OAAON,ICREqC,EAJKC,0BAAgB,CACnChC,MAAOiC,ICAFC,EAAc,CAACC,KAGNC,EAFDC,sBAAYN,EAAaO,gCAAsBC,kBAAe,WAAf,EAAmBL,ICIhFM,IAASC,OACR,kBAAC,IAAD,CAAUL,MAAOA,GAChB,kBAAC,IAAMM,WAAP,KACC,kBAAC,EAAD,QAGFrD,SAASsD,eAAe,SJmHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAF,GACLjC,QAAQiC,MAAMA,EAAMgC,c","file":"static/js/main.a3ce516c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport fetchCardsAPI from \"./redux/Cards/fetchCards\";\r\n\r\nclass Cards extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      start: 0,\r\n      limit: 10,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"scroll\", this.onScroll, false);\r\n    this.props.fetchCardsAPI({\r\n      start: this.state.start,\r\n      limit: this.state.limit,\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"scroll\", this.onScroll);\r\n  }\r\n\r\n  onScroll = () => {\r\n      console.log(window.innerHeight + window.scrollY , document.body.offsetHeight);\r\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\r\n        console.log('asd');\r\n      this.setState({ start: this.state.start + 10 }, function () {\r\n\r\n        this.props.fetchCardsAPI({\r\n          start: this.state.start,\r\n          limit: this.state.limit,\r\n        });\r\n      });\r\n      document.removeEventListener(\"scroll\", this.onScroll);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    const { cards } = this.props;\r\n    console.log(this.props);\r\n    return cards.cards.map((val) => {\r\n      return (\r\n        <>\r\n          <div>Card : {val.id}</div>\r\n          <div className=\"card\" style={{ width: \"18rem\", marginLeft: \"10%\" }}>\r\n            <div className=\"card-body\">\r\n              <h5 className=\"card-title\">{val.title}</h5>\r\n              <p className=\"card-text\">{val.body}</p>\r\n            </div>\r\n          </div>\r\n        </>\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(\"state:\", state);\r\n  return {\r\n    cards: state.cards,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchCardsAPI: (params) => dispatch(fetchCardsAPI(params)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cards);\r\n","import {fetchCards} from './cards.actions';\r\n\r\nexport default function fetchCardsAPI(params) {\r\n    return dispatch => {\r\n        fetch(`https://jsonplaceholder.typicode.com/posts?_start=${params.start}&_limit=${params.limit}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if(res.error) {\r\n                throw(res.error);\r\n            }\r\n            dispatch(fetchCards(res));\r\n            return res;\r\n        })\r\n        .catch(error => {\r\n           \r\n        })\r\n    }\r\n}\r\n\r\n","import { FETCH_CARDS } from './cards.types';\n\nexport const fetchCards = (cards) => {\n\treturn {\n\t\ttype: FETCH_CARDS,\n\t\tcards:cards\n\t};\n};","export const FETCH_CARDS = 'FETCH_CARDS';\n","import React from \"react\";\nimport \"./App.css\";\nimport Cards from \"./Cards\";\n\nexport default function App(props) {\n  return (\n    <div className=\"App\" id=\"main\">\n      <nav class=\"navbar navbar-dark bg-dark\">\n        <span class=\"navbar-brand mb-0 h1\">Cards</span>\n      </nav>\n      <Cards />\n    </div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { FETCH_CARDS } from \"./cards.types\";\n\nconst INITIAL_STATE = {\n  cards: [],\n  loading:true\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  console.log(action);\n  switch (action.type) {\n    case FETCH_CARDS:\n      return {\n        ...state,\n        cards: state.cards.concat(action.cards),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport cardsReducer from './Cards/cards.reducer';\n\nconst rootReducer = combineReducers({\n\tcards: cardsReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './rootReducer';\n\nconst middlewares = [thunk];\nconst store = createStore(rootReducer, composeWithDevTools(),applyMiddleware(...middlewares));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// REDUX\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<React.StrictMode>\n\t\t\t<App />\n\t\t</React.StrictMode>\n\t</Provider>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}